(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for int() with base 10: 'Gaming'"
p3
sS'layer'
p4
S'/home/ashish/web2py/applications/Assignment/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\nimport datetime\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simple replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Welcome to web2py!")\n    return dict(message=T(\'Hello World\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\ndef first():\n    d=db(db.Item.id>0).select(db.Item.ALL,orderby=~db.Item.ranks)\n#  all_likes=db(db.likes.liked_by==auth.user_id).select(db.likes.ALL)\n    return dict(d=d)#,all_likes=all_likes)\n#@auth.requires_login()\ndef post():\n    temp=request.args(0,cast=int)\n    db.comment_item.Item_id.default=temp\n    form=SQLFORM(db.comment_item)\n    if form.process().accepted:\n    \tp=db(db.Item.id==temp).select(db.Item.count_comment)\n    \tdb(db.Item.id==temp).update(count_comment=p[0][\'count_comment\']+1)\n    \tresponse.flash=\'You have added the comments\'\n    all_comments=db(db.comment_item.Item_id==temp).select(db.comment_item.ALL)\n    cret_by=db(db.Item.id==temp).select(db.Item.created_by)\n    all_likes=db((db.likes.Item_id==temp)&(db.likes.liked_by==auth.user_id)).select(db.likes.ALL)\n    return dict(form=form,temp=temp,all_comments=all_comments,cret_by=cret_by,all_likes=all_likes)\n@auth.requires_login()\ndef link():\n    form=SQLFORM(db.Item)\n    if form.process().accepted:\n\tresponse.flash=\'A new item is added\'\n    return dict(form=form)\ndef like():\n    response.flash="You have like this link"\n    temp=request.args(0,cast=int)\n    myset=db(db.Item.id==temp)\n    row=db(db.Item.id==temp).select(db.Item.ALL)\n    new_dislike=row[0][\'count_dislike\']\n    lis=db((db.likes.Item_id==temp)&(db.likes.liked_by==auth.user_id)).select(db.likes.ALL)\n    if len(lis)==0:\n    \tdb.likes.insert(Item_id=temp,liked_by=auth.user_id,flag_likes=2)\n\tnew_like=row[0][\'count_like\']+1\n    elif lis[0][\'flag_likes\']==2:#if like already present\n    \tdb((db.likes.Item_id==temp)&(db.likes.liked_by==auth.user_id)).delete()#update(flag_likes=2)\n\tnew_like=row[0][\'count_like\']-1\n    else:\n    \tdb((db.likes.Item_id==temp)&(db.likes.liked_by==auth.user_id)).update(flag_likes=2)\n    \tnew_dislike=row[0][\'count_dislike\']-1\n\tnew_like=row[0][\'count_like\']+1\n    new_rnk=(-1*(new_dislike*3))+(new_like*5)\n    myset.update(ranks=100+new_rnk,count_like=new_like,count_dislike=new_dislike)\n    redirect(URL(\'first\'))\ndef dislike():\n    response.flash=\'You have dislike this link\'\n    temp=request.args(0,cast=int)\n    lis=db((db.likes.Item_id==temp)&(db.likes.liked_by==auth.user_id)).select(db.likes.ALL)\n    myset=db(db.Item.id==temp)\n    row=db(db.Item.id==temp).select(db.Item.ALL)\n    new_like=row[0][\'count_like\']\n    if len(lis)==0:\n    \tdb.likes.insert(Item_id=temp,liked_by=auth.user_id,flag_likes=1)\n    \tnew_dislike=row[0][\'count_dislike\']+1\n    elif lis[0][\'flag_likes\']==1:\n    \tdb((db.likes.Item_id==temp)&(db.likes.liked_by==auth.user_id)).delete()#.update(flag_likes=1)\n    \tnew_dislike=row[0][\'count_dislike\']-1\n    else:\t\n    \tdb((db.likes.Item_id==temp)&(db.likes.liked_by==auth.user_id)).update(flag_likes=1)\n    \tnew_dislike=row[0][\'count_dislike\']+1\n\tnew_like-=1\n    new_rnk=(-1*(new_dislike*3))+(new_like*5)\n    myset.update(ranks=100+new_rnk,count_dislike=new_dislike,count_like=new_like)\n    redirect(URL(\'first\'))\ndef heading():\n    temp=request.args(0)\n    st=db(db.categories.id==temp).select(db.categories.category)\n    dic=db(db.Item.category==st[0][\'category\']).select(db.Item.ALL,orderby=~db.Item.ranks)\n    return dict(temp=temp,dic=dic)\ndef delete():\n    temp=request.args(0,cast=int)\n    read=db(db.comment_item.id==temp).select(db.comment_item.Item_id);\n    db(db.Item.id==read[0][\'Item_id\']).update(count_comment=(db(db.Item.id==read[0][\'Item_id\']).select(db.Item.count_comment))[0][\'count_comment\']-1)\n    db(db.comment_item.id==temp).delete()\n    redirect(URL(post,args=read[0][\'Item_id\']))\ndef edit():\n    temp=request.args(0,cast=int)\n    read=db(db.comment_item.id==temp).select(db.comment_item.ALL);\n    form=SQLFORM.factory(Field(\'changed\',\'text\',default=read[0][\'comments\']))\n    if form.process().accepted:\n\tresponse.flash="You have changed the comment"\n\tdb(db.comment_item.id==temp).update(comments=form.vars.changed,post=datetime.datetime.now)\n    \tredirect(URL(post,args=read[0][\'Item_id\']))\n    return dict(form=form)\ndef edit_item():\n    temp=request.args(0,cast=int)\n    lis=db(db.Item.id==temp).select(db.Item.ALL)\n    form=SQLFORM.factory(Field(\'category\',\'string\',default=lis[0][\'category\'],requires=IS_IN_DB(db,\'categories.id\',\'categories.category\')),\n\t    \t\tField(\'heading\',\'text\',default=lis[0][\'heading\']),\n\t\t\tField(\'url\',\'string\',default=lis[0][\'url\'],requires=IS_URL())\n\t   \t\t)\n    if form.process().accepted:\n    \tdb(db.Item.id==temp).update(category=request.vars.category,heading=request.vars.heading,url=request.vars.url)\n    return dict(form=form)\ndef delete_item():\n    temp=request.args(0,cast=int)\n    db(db.Item.id==temp).delete()\n    db(db.comment_item.Item_id==temp).delete()\n    db(db.likes.Item_id==temp).delete()\n    redirect(URL(\'first\'))\ndef list():\n    lis=db((db.auth_user.id>0)&(db.auth_user.id!=1)).select(db.auth_user.ALL)\n    return dict(lis=lis)\ndef delete_user():\n    temp=request.args(0,cast=int)\n    db(db.auth_user.id==temp).delete()\n    db(db.Item.created_by==temp).delete()\n    db(db.comment_item.commented_by==temp).delete()\n    db(db.likes.liked_by==temp).delete()\n    redirect(URL(\'list\'))\ndef categories():\n    form=SQLFORM(db.categories)\n    if form.process().accepted:\n    \tresponse.flash="category added"\n    lis=db(db.categories.id>0).select(db.categories.ALL)\n    return dict(lis=lis,form=form)\n\n\nresponse._vars=response._caller(heading)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/ashish/web2py/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/home/ashish/web2py/applications/Assignment/controllers/default.py", line 193, in <module>\n  File "/home/ashish/web2py/gluon/globals.py", line 193, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/ashish/web2py/applications/Assignment/controllers/default.py", line 141, in heading\n    st=db(db.categories.id==temp).select(db.categories.category)\n  File "/home/ashish/web2py/gluon/dal.py", line 9769, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/ashish/web2py/gluon/dal.py", line 2222, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/ashish/web2py/gluon/dal.py", line 1667, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/ashish/web2py/gluon/dal.py", line 1577, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/ashish/web2py/gluon/dal.py", line 1356, in expand\n    return op(first, second, **optional_args)\n  File "/home/ashish/web2py/gluon/dal.py", line 1281, in EQ\n    self.expand(second, first.type))\n  File "/home/ashish/web2py/gluon/dal.py", line 1366, in expand\n    return str(self.represent(expression,field_type))\n  File "/home/ashish/web2py/gluon/dal.py", line 1796, in represent\n    return str(int(obj))\nValueError: invalid literal for int() with base 10: \'Gaming\'\n'
p11
s.